listen 7000
listen "/var/run/{{ app }}/unicorn.sock"
working_directory "/data/{{ app }}/current"
worker_processes 2
pid "/var/run/{{ app }}/unicorn.pid"
stdout_path "/data/{{ app }}/shared/log/unicorn.stdout.log"
stderr_path "/data/{{ app }}/shared/log/unicorn.stderr.log"
logger Logger.new("/data/{{ app }}/shared/log/unicorn.log")

before_fork do |server, worker|
##
# When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
# immediately start loading up a new version of itself (loaded with a new
# version of our app). When this new Unicorn is completely loaded
# it will begin spawning workers. The first worker spawned will check to
# see if an .oldbin pidfile exists. If so, this means we've just booted up
# a new Unicorn and need to tell the old one that it can now die. To do so
# we send it a QUIT.
#
# Using this method we get 0 downtime deploys.

  old_pid = "/var/run/{{ app }}/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

if defined?(Bundler.settings)
  before_exec do |server|
    ENV['BUNDLE_GEMFILE'] = "/data/{{ app }}/current/Gemfile"
  end
end
